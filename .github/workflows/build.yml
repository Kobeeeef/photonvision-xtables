name: Build

on:
  # Run on pushes to main and pushed tags, and on pull requests against main, but ignore the docs folder
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build-client:
    name: "PhotonClient Build"
    defaults:
      run:
        working-directory: photon-client
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Dependencies
        run: npm ci
      - name: Build Production Client
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: built-client
          path: photon-client/dist/
  build-examples:

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            architecture: aarch64
          - os: ubuntu-22.04

    name: "Photonlib - Build Examples - ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
      - name: Install RoboRIO Toolchain
        run: ./gradlew installRoboRioToolchain
      # Need to publish to maven local first, so that C++ sim can pick it up
      - name: Publish photonlib to maven local
        run: ./gradlew photon-targeting:publishtomavenlocal photon-lib:publishtomavenlocal -x check
      - name: Build Java examples
        working-directory: photonlib-java-examples
        run: ./gradlew build
      - name: Build C++ examples
        working-directory: photonlib-cpp-examples
        run: ./gradlew build
  build-gradle:
    name: "Gradle Build"
    runs-on: ubuntu-22.04
    steps:
      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
      - name: Install mrcal deps
        run: sudo apt-get update && sudo apt-get install -y libcholmod3 liblapack3 libsuitesparseconfig5
      - name: Gradle Build
        run: ./gradlew photon-targeting:build photon-core:build photon-server:build -x check
      - name: Gradle Tests
        run: ./gradlew testHeadless -i --stacktrace
      - name: Gradle Coverage
        run: ./gradlew jacocoTestReport
      - name: Publish Coverage Report
        uses: codecov/codecov-action@v4
        with:
          file: ./photon-server/build/reports/jacoco/test/jacocoTestReport.xml
      - name: Publish Core Coverage Report
        uses: codecov/codecov-action@v4
        with:
          file: ./photon-core/build/reports/jacoco/test/jacocoTestReport.xml

  build-photonlib-vendorjson:
    name: "Build Vendor JSON"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      # grab all tags
      - run: git fetch --tags --force

      # Generate the JSON and give it the ""standard""" name maven gives it
      - run: |
          ./gradlew photon-lib:generateVendorJson
          export VERSION=$(git describe --tags --match=v*)
          mv photon-lib/build/generated/vendordeps/photonlib.json photon-lib/build/generated/vendordeps/photonlib-$(git describe --tags --match=v*).json

      # Upload it here so it shows up in releases
      - uses: actions/upload-artifact@v4
        with:
          name: photonlib-vendor-json
          path: photon-lib/build/generated/vendordeps/photonlib-*.json

  build-photonlib-host:
    env:
      MACOSX_DEPLOYMENT_TARGET: 13
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            artifact-name: macOS
            architecture: aarch64
          - os: ubuntu-22.04
            artifact-name: Linux

    name: "Photonlib - Build Host - ${{ matrix.artifact-name }}"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          architecture: ${{ matrix.architecture }}
      - run: git fetch --tags --force
      - run: ./gradlew photon-targeting:build photon-lib:build -i
        name: Build with Gradle
      - run: ./gradlew photon-lib:publish photon-targeting:publish
        name: Publish
        env:
          ARTIFACTORY_API_KEY: ${{ secrets.ARTIFACTORY_API_KEY }}
        if: github.event_name == 'push' && github.repository_owner == 'photonvision'
      # Copy artifacts to build/outputs/maven
      - run: ./gradlew photon-lib:publish photon-targeting:publish -PcopyOfflineArtifacts
      - uses: actions/upload-artifact@v4
        with:
          name: maven-${{ matrix.artifact-name }}
          path: build/outputs

  build-package:
    needs: [build-client, build-gradle]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            artifact-name: Linux
            architecture: x64
            arch-override: linuxx64
          - os: ubuntu-22.04
            artifact-name: LinuxArm64
            architecture: x64
            arch-override: linuxarm64

    runs-on: ${{ matrix.os }}
    name: "Build fat JAR - ${{ matrix.artifact-name }}"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          architecture: ${{ matrix.architecture }}
      - name: Install Arm64 Toolchain
        run: ./gradlew installArm64Toolchain
        if: ${{ (matrix.artifact-name) == 'LinuxArm64' }}
      - run: |
          rm -rf photon-server/src/main/resources/web/*
          mkdir -p photon-server/src/main/resources/web/docs
        if: ${{ (matrix.os) != 'windows-latest' }}
      - run: |
          del photon-server\src\main\resources\web\*.*
          mkdir photon-server\src\main\resources\web\docs
        if: ${{ (matrix.os) == 'windows-latest' }}
      - uses: actions/download-artifact@v4
        with:
          name: built-client
          path: photon-server/src/main/resources/web/
      - uses: actions/download-artifact@v4
        with:
          name: built-docs
          path: photon-server/src/main/resources/web/docs
      - run: ./gradlew photon-targeting:jar photon-server:shadowJar -PArchOverride=${{ matrix.arch-override }}
        if: ${{ (matrix.arch-override != 'none') }}
      - run: ./gradlew photon-server:shadowJar
        if: ${{ (matrix.arch-override == 'none') }}
      - uses: actions/upload-artifact@v4
        with:
          name: jar-${{ matrix.artifact-name }}
          path: photon-server/build/libs
      - uses: actions/upload-artifact@v4
        with:
          name: photon-targeting_jar-${{ matrix.artifact-name }}
          path: photon-targeting/build/libs

